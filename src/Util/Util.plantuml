@startuml

title __UTIL's Class Diagram__\n

  namespace  {
    namespace til {
      class Util.AnimationManager {
          {static} - valuesToAnimate : ArrayList<Animator>
          {static} + animate()
          {static} + getValuesToAnimate()
          {static} + setValuesToAnimate()
      }
    }
  }
  

  namespace  {
    namespace til {
      class Util.Animator {
          + howManyFrames : int
          + pingPong : boolean
          + speed : float
          # lerpVal : float
          + Animator()
          + animate()
      }
    }
  }
  

  namespace  {
    namespace til {
      class Util.Material {
          - metalness : float
          - reflectivity : float
          - refractiveIndex : float
          - roughness : float
          - transparent : boolean
          + Material()
          + Material()
          + Material()
          + Material()
          + Material()
          + getAlbedoColor()
          + getMetalness()
          + getReflectivity()
          + getRefractiveIndex()
          + getRoughness()
          + isTransparent()
          + setAlbedoColor()
          + setMetalness()
          + setReflectivity()
          + setRefractiveIndex()
          + setRoughness()
          + setTransparent()
      }
    }
  }
  

  namespace  {
    namespace til {
      class Util.MaterialAnimator {
          - startFloat : float
          - targetFloat : float
          + MaterialAnimator()
          + animate()
      }
    }
  }
  

  namespace  {
    namespace til {
      enum MaterialValueType {
        color
        reflectivity
        refractiveIndex
        roughness
      }
    }
  }
  

  namespace  {
    namespace til {
      class Util.MathUtil {
          {static} + clamp()
          {static} + clampF()
          {static} + generatRandomPositiveNegitiveValue()
          {static} + lerp()
          {static} + solveQuadratic()
          {static} ~ blend()
      }
    }
  }
  

  namespace  {
    namespace til {
      class Util.RenderUtil {
          {static} ~ F0 : float
          {static} ~ indexGlas : float
          {static} ~ indexLuft : float
          {static} ~ indexWasser : float
          {static} ~ k : float
          {static} ~ refrA : float
          {static} ~ refrB : float
          {static} ~ totalReflexion : boolean
          {static} + CookTorranceNeu()
          {static} + getColRecursive()
          {static} + getPointinSphere()
          {static} + getReflexionVector()
          {static} + getRefractionVector()
          {static} + randomSpherePoint()
          {static} + shadowCheck()
      }
    }
  }
  

  namespace  {
    namespace til {
      class Util.TransformationAnimator {
          + TransformationAnimator()
          + animate()
      }
    }
  }
  

  namespace  {
    namespace til {
      enum Vector3Type {
        position
        rotation
        scale
      }
    }
  }
  

  Util.Animator o-- objects.SceneObject : object
  Util.Material o-- math.Vector3 : albedoColor
  Util.MaterialAnimator -up-|> Util.Animator
  Util.MaterialAnimator o-- math.Vector3 : targetVec
  Util.MaterialAnimator o-- Util.MaterialAnimator.MaterialValueType : valueType
  Util.MaterialAnimator o-- Util.Material : startMat
  Util.MaterialAnimator o-- math.Vector3 : startVec
  Util.MaterialAnimator o-- Util.Material : targetMat
  Util.MaterialAnimator +-down- Util.MaterialAnimator.MaterialValueType
  Util.TransformationAnimator -up-|> Util.Animator
  Util.TransformationAnimator o-- math.Vector3 : targetVec
  Util.TransformationAnimator o-- Util.TransformationAnimator.Vector3Type : vectorType
  Util.TransformationAnimator o-- math.Vector3 : startVec
  Util.TransformationAnimator +-down- Util.TransformationAnimator.Vector3Type


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
